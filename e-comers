package com.MAMA.ServiceImpl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.MAMA.Models.Cart;
import com.MAMA.Models.CartItem;
import com.MAMA.Models.Dish;
import com.MAMA.Models.User;
import com.MAMA.Paylods.CartDto;
//import com.MAMA.Paylods.CartDto;
import com.MAMA.Paylods.CartItemDto;
import com.MAMA.Paylods.CartRequestDto;
import com.MAMA.Paylods.ChefStatusDto;
import com.MAMA.Paylods.CouponCheckResponseDto;
import com.MAMA.Repo.CartItemRepo;
import com.MAMA.Repo.CartRepo;
import com.MAMA.Repo.DishRepo;
import com.MAMA.Repo.UserRepo;
import com.MAMA.Service.CartService;

import jakarta.transaction.Transactional;

@Service
@Transactional

public class CartServiceImpl implements CartService {
	
	@Autowired
	DishRepo dishRepo;
	
	@Autowired
	CartRepo cartRepo;
	
	@Autowired
	CartItemRepo cartItemRepo;
	
	@Autowired
	UserRepo userrepo;

//	@Override
//    public Cart createCart() {
//        Cart cart = new Cart();
//        return cartRepo.save(cart);
//    }
//
//	@Override
//    public Cart addItemToCart(Long cartId, CartItemDto cartItemDto) {
//        Optional<Cart> optionalCart = cartRepo.findById(cartId);
//        Cart cart = optionalCart.orElseThrow(() -> new RuntimeException("Cart not found"));
//
//        Optional<Dish> optionalDish = dishRepo.findById(cartItemDto.getDishId());
//        Dish dish = optionalDish.orElseThrow(() -> new RuntimeException("Dish not found"));
//
//        CartItem cartItem = new CartItem();
//        cartItem.setQuantity(cartItemDto.getQuantity());
//        cartItem.setPrice(dish.getPrice());  // Assuming price comes from the dish
//        cartItem.setCart(cart);
//        cartItem.setDish(dish);
//
//        cart.getItems().add(cartItem);
//
//        return cartRepo.save(cart);
//    }


	 @Override
	    public Cart getCart(Long cartId) {
	        return cartRepo.findById(cartId).orElseThrow(() -> new RuntimeException("Cart not found"));
	    }

//	 @Override
//	 public Cart saveCart(Long userId, CartRequestDto cartRequest) {
//	     User user = userrepo.findById(userId)
//	             .orElseThrow(() -> new RuntimeException("User not found"));
//
//	     // Check if there is already a cart for the user with an applied coupon
//	     Cart existingCart = cartRepo.findByUser(user)
//	             .filter(cart -> cart.getAppliedCouponCode() != null)
//	             .orElse(null);
//
//	     // Always create a new cart for the user
//	     Cart cart = new Cart();
//	     cart.setUser(user);
//
//	     double totalAmount = 0;
//	     double discountAmount = 0;
//
//	     for (CartItemDto itemDTO : cartRequest.getCartItems()) {
//	         Dish dish = dishRepo.findById(itemDTO.getDishId())
//	                 .orElseThrow(() -> new RuntimeException("Dish not found"));
//
//	         CartItem cartItem = new CartItem();
//	         cartItem.setCart(cart);
//	         cartItem.setDish(dish);
//	         cartItem.setSubCategory(itemDTO.getSubCategory()); // Use the dish name from DTO
//	         cartItem.setQuantity(itemDTO.getQuantity());
//	         cartItem.setPrice(itemDTO.getPrice());
//
//	         cart.getList().add(cartItem);
//
//	         totalAmount += itemDTO.getPrice(); // Adding the All Prices
//	     }
//
//	     // Apply discount if coupon code matches and no coupon has been applied yet
//	     String couponCode = cartRequest.getCouponCode();
//	     if (couponCode != null && couponCode.equals("DISCOUNT10")) {
//	         if (existingCart == null) { // Check if no coupon has been applied yet
//	             discountAmount = totalAmount * 0.10; // Assuming 10% discount
//	             cart.setAppliedCouponCode(couponCode); // Store applied coupon code
//	         }
//	     }
//
//	     cart.setTotalAmount(totalAmount); // Set total amount in the cart
//	     cart.setDiscountAmount(discountAmount); // Set discount amount
//	     cart.setFinalAmount(totalAmount - discountAmount); // Set final amount after discount
//
//	     return cartRepo.save(cart);
//	 }
	 
	 
	 @Override
	 public Cart saveCart(Long userId, CartRequestDto cartRequest) {
	     User user = userrepo.findById(userId)
	             .orElseThrow(() -> new RuntimeException("User not found"));

	     // Always create a new cart for the user
	     Cart cart = new Cart();
	     cart.setUser(user);

	     for (CartItemDto itemDTO : cartRequest.getCartItems()) {
	         Dish dish = dishRepo.findById(itemDTO.getDishId())
	                 .orElseThrow(() -> new RuntimeException("Dish not found"));

	         CartItem cartItem = new CartItem();
	         cartItem.setCart(cart);
	         cartItem.setDish(dish);
	         cartItem.setSubCategory(itemDTO.getSubCategory()); // Use the dish name from DTO
	         cartItem.setQuantity(itemDTO.getQuantity());
	         cartItem.setPrice(itemDTO.getPrice());
//	         cartItem.setNormalPrice(itemDTO.getNormalPrice());

	         cart.getList().add(cartItem);
	     }

	     // Check if the coupon code has already been used by the user
	     String couponCode = cartRequest.getCouponCode();
	     if (couponCode != null) {
	         boolean couponUsed = cartRepo.findByUser(user).stream()
	                 .anyMatch(existingCart -> couponCode.equals(existingCart.getCouponCode()));

	         if (couponUsed) {
	             throw new RuntimeException("Coupon code has already been used by this user");
	         }
	         cart.setCouponCode(couponCode); // Store applied coupon code
	     }

	     // Directly use the values from the frontend request
	     cart.setTotalAmount(cartRequest.getTotalAmount());
	     cart.setDiscountAmount(cartRequest.getDiscountAmount());
	     cart.setAmountAfterDiscount(cartRequest.getAmountAfterDiscount());
	     cart.setGrandTotal(cartRequest.getGrandTotal());
	     cart.setSgstTotal(cartRequest.getSgstTotal());
	     cart.setCgstTotal(cartRequest.getCgstTotal());
	     cart.setServiceTaxTotal(cartRequest.getServiceTaxTotal());
	     cart.setService(cartRequest.getService());
	     cart.setPaymentMode(cartRequest.getPaymentMode());

	     return cartRepo.save(cart);
	 }


	 @Override
	 public CouponCheckResponseDto checkCouponUsed(Long userId) {
	     // Check if the user exists
	     User user = userrepo.findById(userId)
	             .orElseThrow(() -> new RuntimeException("User not found"));

	     // Retrieve carts for the user
	     List<Cart> carts = cartRepo.findByUser(user);

	     // Check if any cart has the "DISCOUNT10" coupon code applied
	     Cart cartWithCoupon = carts.stream()
	             .filter(cart -> "DISCOUNT10".equals(cart.getCouponCode()))
	             .findFirst()
	             .orElse(null);

	     // Prepare the response
	     CouponCheckResponseDto response = new CouponCheckResponseDto();
	     if (cartWithCoupon != null) {
	         response.setCouponCode(cartWithCoupon.getCouponCode());
	     }

	     return response;
	 }


	

	 @Override
	    public CartDto getLatestCartByUserId(Long userId) {
	        List<Cart> carts = cartRepo.findTopByUserIdOrderByCartIdDesc(userId);
	        if (carts != null && !carts.isEmpty()) {
	            Cart cart = carts.get(0);
	            return convertToDto(cart); // Convert the entity to DTO
	        }
	        return null; // or throw an exception if you prefer
	    }

	    private CartDto convertToDto(Cart cart) {
	        CartDto dto = new CartDto();
	        dto.setCartId(cart.getCartId());
	        dto.setTotalAmount(cart.getTotalAmount());
//	        dto.setAmountAfterDiscount(cart.getAmountAfterDiscount());
	        dto.setGrandTotal(cart.getGrandTotal());
//	        dto.setDiscountAmount(cart.getDiscountAmount());
//	        dto.setAppliedCouponCode(cart.getCouponCode());
	        dto.setSgstTotal(cart.getSgstTotal());
	        dto.setCgstTotal(cart.getCgstTotal());
//	        dto.setServiceTaxTotal(cart.getServiceTaxTotal());
	        dto.setList(cart.getList());
	        dto.setService(cart.getService());
	        dto.setPaymentMode(cart.getPaymentMode());
	        dto.setCreatedTime(cart.getCreatedTime());
	        return dto;
	    }
	    
	    
//--------------------SHOWING ONLY WANTED FIELDS FROM THE DATABASE TABLE--------------------

	    
	    @Override
	    public List<CartDto> getall() {
	        List<Cart> carts = cartRepo.findAll();
	        List<CartDto> cartDtos = carts.stream().map(this::convertToDto2).collect(Collectors.toList());
	        return cartDtos;
	    }

	    private CartDto convertToDto2(Cart cart) {
	        CartDto cartDto = new CartDto();
	        cartDto.setCartId(cart.getCartId());
	        cartDto.setTotalAmount(cart.getTotalAmount());
//	        cartDto.setAmountAfterDiscount(cart.getAmountAfterDiscount());
	        cartDto.setGrandTotal(cart.getGrandTotal());
//	        cartDto.setDiscountAmount(cart.getDiscountAmount());
//	        cartDto.setAppliedCouponCode(cart.getCouponCode());
	        cartDto.setSgstTotal(cart.getSgstTotal());
	        cartDto.setCgstTotal(cart.getCgstTotal());
//	        cartDto.setServiceTaxTotal(cart.getServiceTaxTotal());
	        cartDto.setService(cart.getService());
	        cartDto.setPaymentMode(cart.getPaymentMode());
	        cartDto.setCreatedTime(cart.getCreatedTime());
//	        cartDto.setList(cart.getList());
	        cartDto.setChefStatus(cart.getChefStatus());
	        
	        if (cart.getUser() != null) {
	            cartDto.setUserId(cart.getUser().getUserId());
	            cartDto.setUserName(cart.getUser().getUserName());
	        } else {
	            System.out.println("User is null for cartId: " + cart.getCartId());
	        }
	        List<CartItemDto> itemDtos = cart.getList().stream().map(item -> {
	            CartItemDto itemDto = new CartItemDto();
	            
	            itemDto.setImage(item.getDish().getImage());
	            itemDto.setDishId(item.getDish().getDishId());
	            itemDto.setSubCategory(item.getSubCategory());
	            itemDto.setQuantity(item.getQuantity());
	            itemDto.setPrice(item.getPrice());
	            return itemDto;
	        }).collect(Collectors.toList());

	        cartDto.setList1(itemDtos);
	        return cartDto;
	    }



		
//		@Override
//		public List<CartDto> getCartsByUserId(Long userId) {
//		    User user = userrepo.findById(userId)
//		            .orElseThrow(() -> new RuntimeException("User not found"));
//
//		    List<Cart> carts = cartRepo.findByUser(user);
//
//		    return carts.stream().map(this::convertToDto1).collect(Collectors.toList());
//		}
//
//		private CartDto convertToDto1(Cart cart) {
//		    CartDto cartDto = new CartDto();
//		    
//		    
//		    cartDto.setCartId(cart.getCartId());
//		    cartDto.setTotalAmount(cart.getTotalAmount());
////		    cartDto.setAmountAfterDiscount(cart.getAmountAfterDiscount());
//		    cartDto.setGrandTotal(cart.getGrandTotal());
////		    cartDto.setDiscountAmount(cart.getDiscountAmount());
////		    cartDto.setAppliedCouponCode(cart.getCouponCode());
//		    cartDto.setSgstTotal(cart.getSgstTotal());
//		    cartDto.setCgstTotal(cart.getCgstTotal());
////		    cartDto.setServiceTaxTotal(cart.getServiceTaxTotal());
//		    cartDto.setService(cart.getService());
//		    cartDto.setPaymentMode(cart.getPaymentMode());
//		    cartDto.setCreatedTime(cart.getCreatedTime());
//		    cartDto.setList(cart.getList());
//		    
//		  
//
//		    // Convert CartItem to CartItemDto
//		    List<CartItemDto> itemDtos = cart.getList().stream().map(item -> {
//		        CartItemDto itemDto = new CartItemDto();
//		        
////		        itemDto.setDishId(item.getDish().getDishId());
////		        itemDto.setImage(item.getDish().getImage());
//		        itemDto.setSubCategory(item.getSubCategory());
//		        itemDto.setQuantity(item.getQuantity());
//		        itemDto.setPrice(item.getPrice());
//		        return itemDto;
//		    }).collect(Collectors.toList());
//
//		    // Set the converted itemDtos to cartDto
//		    cartDto.setList1(itemDtos);
//
//		    return cartDto;
//		}
	    
//	    -------------------------TO START CART ID COUNT FROM 1-------------------------
	    
	    @Override
	    public List<CartDto> getCartsByUserId(Long userId) {
	        User user = userrepo.findById(userId)
	                .orElseThrow(() -> new RuntimeException("User not found"));

	        List<Cart> carts = cartRepo.findByUser(user);

	        // Clear the ID map and reset the counter before processing
	        Map<Long, Long> cartIdMap = new HashMap<>();
	        AtomicLong nextCartId = new AtomicLong(1);

	        return carts.stream()
	            .map(cart -> convertToDtoWithNewId(cart, cartIdMap, nextCartId.getAndIncrement()))
	            .collect(Collectors.toList());
	    }

	    private CartDto convertToDtoWithNewId(Cart cart, Map<Long, Long> cartIdMap, long newCartId) {
	        CartDto cartDto = new CartDto();

	        // Map the original cart ID to the new ID
	        cartIdMap.put(cart.getCartId(), newCartId);
	        cartDto.setCartId(cartIdMap.get(cart.getCartId()));

	        cartDto.setTotalAmount(cart.getTotalAmount());
	        cartDto.setGrandTotal(cart.getGrandTotal());
	        cartDto.setSgstTotal(cart.getSgstTotal());
	        cartDto.setCgstTotal(cart.getCgstTotal());
	        cartDto.setService(cart.getService());
	        cartDto.setPaymentMode(cart.getPaymentMode());
	        cartDto.setCreatedTime(cart.getCreatedTime());
	        cartDto.setList(cart.getList());

	        // Convert CartItem to CartItemDto
	        List<CartItemDto> itemDtos = cart.getList().stream().map(item -> {
	            CartItemDto itemDto = new CartItemDto();
	            itemDto.setSubCategory(item.getSubCategory());
	            itemDto.setQuantity(item.getQuantity());
	            itemDto.setPrice(item.getPrice());
	            return itemDto;
	        }).collect(Collectors.toList());

	        // Set the converted itemDtos to cartDto
	        cartDto.setList1(itemDtos);

	        return cartDto;
	    }

		@Override
		public ChefStatusDto editbycartid(ChefStatusDto chefStatusDto, Long cartId) {
		     Cart cart = cartRepo.findById(cartId)
			         .orElseThrow(()-> new RuntimeException("Cart not Found with The id: "+ cartId));
			cart.setChefStatus(chefStatusDto.getChefStatus());
			cartRepo.save(cart);
			return chefStatusDto;
		}



}


